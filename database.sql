CREATE TABLE users (
    userID INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE textbooks (
    textbookID INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    available BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE messages (
    messageID INT PRIMARY KEY AUTO_INCREMENT,
    senderID INT,
    receiverID INT,
    messageText TEXT,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (senderID) REFERENCES users(userID),
    FOREIGN KEY (receiverID) REFERENCES users(userID)
);

CREATE TABLE payments (
    paymentID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT,
    amount DECIMAL(10, 2) NOT NULL,
    paymentDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES users(userID)
);

CREATE TABLE admins (
    adminID INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE trades (
    tradeID INT PRIMARY KEY AUTO_INCREMENT,
    textbookID INT,
    fromUserID INT,
    toUserID INT,
    tradeDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (textbookID) REFERENCES textbooks(textbookID),
    FOREIGN KEY (fromUserID) REFERENCES users(userID),
    FOREIGN KEY (toUserID) REFERENCES users(userID)
);

CREATE TABLE feedbacks (
    feedbackID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT,
    feedbackText TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES users(userID)
);

CREATE TABLE reports (
    reportID INT PRIMARY KEY AUTO_INCREMENT,
    adminID INT,
    reportText TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (adminID) REFERENCES admins(adminID)
);


CREATE TABLE payment_processor (
    processorID INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    handlesRefunds BOOLEAN,
    managesTransactionRecords BOOLEAN,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
